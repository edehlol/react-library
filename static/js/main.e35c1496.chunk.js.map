{"version":3,"sources":["modules/book.js","components/bookList.js","components/bookForm.js","App.js","serviceWorker.js","index.js"],"names":["Book","title","author","pages","read","this","id","Math","floor","Date","now","random","newTitle","TableContainer","styled","div","Table","table","Tr","tr","EditButton","button","Th","th","BookList","bookList","props","books","map","book","key","onClick","handleClickEdit","React","Component","sidebarToggle","keyframes","Sidebar","Title","h2","Form","form","LabelAndInput","Label","label","Input","input","invalidInput","validInput","TitleInput","titleValid","AuthorInput","authorValid","SaveButton","CancelButton","SaveAndCancelContainer","DeleteButton","SwitchButton","Slider","span","InputSwitch","FieldsAreReq","p","BookForm","formDisplayed","formType","className","onSubmit","handleSubmit","type","name","value","onChange","handleChange","min","checked","toggleForm","handleClickSave","handleClickDelete","Header","header","h1","Content","AddBookButton","lotr","antifragile","localStorage","getItem","JSON","parse","AddBook","Library","state","bind","toggleFormOn","toggleFormOff","setState","clearStates","forEach","Number","target","parentNode","preventDefault","setItem","stringify","index","splice","validate","validateForm","classList","contains","push","myBooks","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e35c1496.chunk.js","sourcesContent":["class Book {\n    constructor(title, author, pages, read) {\n      this.title = title\n      this.author = author\n      this.pages = pages\n      this.read = read\n      this.id = Math.floor(Date.now() / Math.random() * 3)\n    }\n    setTitle(newTitle) {\n      this.title = newTitle\n    }\n  }\n\n  export default Book","import React from 'react'\nimport styled from 'styled-components'\n\nconst TableContainer = styled.div`\ncolor: #1c1c1c;\n`\nconst Table = styled.table`\n  font-size: 14px;\n  width: 100%;\n  border-collapse: collapse;\n  width: calc(100% - 32px);\n  @media only screen and (max-width: 1152px) {\n    \n  }\n`\nconst Tr = styled.tr`\nwidth: 100%;\nborder-bottom: 1px solid #bfbfbf;\nheight: 64px;\n// @media only screen and (max-width: 1152px) {\n//     width: 80%;\n//     background: green;\n// }\n\n`\nconst EditButton = styled.button`\n    border: none;\n    background: none;\n    text-decoration: underline;\n    font-size: 14px;\n    color: #1890ff;\n    &:hover {\n        cursor: pointer;\n    }\n`\nconst Th = styled.th`\n    font-size: 16px;\n    font-weight: 500;\n    text-align: left;\n`\nclass BookList extends React.Component {\n    render() {\n      const bookList = this.props.books.map(book =>\n        <Tr key={book.id} id={book.id}>\n          <td>{book.title}</td>\n          <td>{book.author}</td>\n          <td>{book.pages}</td>\n          <td>{book.read ? 'Read' : 'Not Read'}</td>\n          <td><EditButton onClick={this.props.handleClickEdit}>Edit</EditButton></td>\n        </Tr>\n        )\n      return (\n          <TableContainer>\n<Table>\n          <thead>\n            <Tr>\n              <Th>Title</Th>\n              <Th>Author</Th>\n              <Th>Pages</Th>\n              <Th>Status</Th>\n              <Th></Th>\n            </Tr>\n          </thead>\n          <tbody>\n            {bookList}\n          </tbody>\n        </Table>\n          </TableContainer>\n        \n      )\n    }\n  }\n\n  export default BookList","import React from 'react'\nimport styled, {keyframes} from 'styled-components'\n\n\nconst sidebarToggle = keyframes`\n  from {\n    left: -336px;\n  }\n  to {\n    left: 0px;\n  }\n`\nconst Sidebar = styled.div`\n    position: fixed;\n    top: 0;\n    width: 336px;\n    height: 100%;\n    padding-top: 64px;\n    border-right: 1px;\n    box-shadow: 1px 0px 2px 0px rgba(0,0,0,0.35);\n    z-index: 2;\n    background: #fafafa;\n    animation: ${sidebarToggle} .3s ease-in-out;\n    color: #1c1c1c;\n    @media only screen and (max-width: 1152px) {\n      width: 100%;\n      animation: none;\n    }\n`\n    \nconst Title = styled.h2`\n    font-size: 24px;\n    font-weight: 500;\n    margin-top: 0px;\n    margin-right: 32px;\n    text-align: right;\n    color: #1890ff;\n`\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 272px;\n  height: 100%;\n  font-size: 14px;\n  margin: auto;\n\n`\nconst LabelAndInput = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 272px;\n  height: 32px;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  padding-bottom: 32px;\n  border-bottom: 1px solid #bfbfbf;\n`\nconst Label = styled.label`\n    font-size: 14px;\n    height: 24px;\n    line-height: 28px;\n    width: 64px;\n    text-align: left;\n\n`\nconst noValidatedInput = '1px solid #bfbfbf;'\n\nconst Input = styled.input`\n    flex: 1;\n    height: 24px;\n    font-size: 14px;\n    border-radius: 4px;\n    padding-left: 8px;\n    padding-right: 8px;\n    border: 1px solid #bfbfbf;\n    &:focus {\n      border: 2px solid #40a9ff;\n    }\n`\nconst invalidInput = {\n  border: '2px solid red;',\n  background: '#ffccc7'\n}\nconst validInput = {\n  border: '1px solid #52c41a;',\n  background: '#d9f7be'\n}\nconst TitleInput = styled(Input)`\n  border: ${props => \n    props.titleValid ? validInput.border: \n      props.titleValid === null ? noValidatedInput : invalidInput.border\n    }\n  background: ${props => \n    props.titleValid ? validInput.background: \n      props.titleValid === null ? noValidatedInput : invalidInput.background\n    }\n`\nconst AuthorInput = styled(Input)`\n    border: ${props => \n      props.authorValid ? validInput.border: \n        props.authorValid === null ? noValidatedInput : invalidInput.border\n      }\n    background: ${props => \n        props.authorValid ? validInput.background: \n          props.authorValid === null ? noValidatedInput : invalidInput.background\n        }\n`\nconst SaveButton = styled.button`\n  text-decoration: none;\n  border: none;\n  border-radius: 4px;\n  background: #40a9ff;\n  &:hover {\n    background: #1890ff;\n    cursor: pointer;\n  }\n  color: white;\n  font-size: 16px;\n  font-weight: 500;\n  width: 128px;\n  height: 32px;\n`\nconst CancelButton = styled.button`\n  display: block;\n  width: 100%;\n  text-align: center;\n  text-decoration: none;\n  text-decoration: underline #1c1c1c;\n  border: none;\n  background: none;\n  margin-top: 8px;\n  &:hover {\n    cursor: pointer;\n    font-weight: 500;\n  }\n`\nconst SaveAndCancelContainer = styled.div`\n  text-align: center;\n`\nconst DeleteButton = styled.button`\n  align-self: flex-end;\n  text-align: right;\n  margin-top: 104px;\n  height: 32px;\n  width: 128px;\n  border: none;\n  background: none;\n  color: #ff4d4f;\n  text-decoration: underline #ff4d4f;\n  font-size: 14px;\n  font-weight: 400;\n\n  &:hover {\n    cursor: pointer;\n    color: #f5222d;\n    text-decoration: underline #f5222d;\n  }\n`\n\n\nconst SwitchButton = styled.label`\n  display: inline-block;\n  width: 64px;\n  height: 24px;\n  border-radius: 4px;\n  position: relative;\n  background: #e8e8e8;\n  cursor: pointer;\n  border: 1px solid #bfbfbf;\n`\nconst Slider = styled.span`\n  position: absolute;\n  top: 4px;\n  left: 4px;\n  right: 0;\n  bottom: 0;\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n  background: white;\n  transition: .4s;\n\n`\nconst InputSwitch = styled(Input)`\n  opacity: 0;\n  &:checked + ${Slider}{\n    background: #1890ff;\n    transform: translateX(40px)\n  }\n`\nconst black = 'black'\nconst red = 'red'\nconst FieldsAreReq = styled.p`\n  color: ${props => props.TitleInput ? black : red}\n`\n\n\nclass BookForm extends React.Component {\n    \n    render() {\n      return (\n        <Sidebar formDisplayed={this.props.formDisplayed}>\n            {this.props.formType === 'editBookForm' && \n                <Title>{this.props.title}</Title>\n            }\n            {this.props.formType === 'newBookForm' &&\n                <Title>New book</Title>\n            }\n          <Form className={this.props.formType} onSubmit={this.props.handleSubmit}>\n            <LabelAndInput>\n              <Label>\n                  Title*: \n              </Label>\n              <TitleInput \n                  type='text' \n                  name='title'\n                  value={this.props.title} \n                  onChange={this.props.handleChange}\n                  titleValid={this.props.titleValid}\n              />\n            </LabelAndInput>\n\n            <LabelAndInput>\n              <Label>\n                Author*:\n              </Label>\n              <AuthorInput \n                  type='text' \n                  name='author'\n                  value={this.props.author} \n                  onChange={this.props.handleChange}\n                  authorValid={this.props.authorValid}\n                />\n            </LabelAndInput>\n\n            <LabelAndInput>\n              <Label>\n                Pages:\n\n              </Label>\n              <Input \n                  type='number'\n                  min='0'\n                  name='pages'\n                  value={this.props.pages}\n                  onChange={this.props.handleChange}\n                />\n            </LabelAndInput>\n            <LabelAndInput>\n              <Label>\n                Read:\n\n              </Label>\n              <SwitchButton>\n              <InputSwitch \n                  type='checkbox'\n                  name='read'\n                  checked={this.props.read}\n                  onChange={this.props.handleChange}\n                />\n                <Slider/>\n              </SwitchButton>\n\n            </LabelAndInput>\n\n            <SaveAndCancelContainer>\n              {this.props.formType === 'newBookForm' &&\n              <div>\n                <SaveButton>Add</SaveButton>\n                <CancelButton onClick={this.props.toggleForm}>Cancel</CancelButton>\n              </div>\n              }\n              {this.props.formType === 'editBookForm' &&\n              <div>\n                <SaveButton onClick={this.props.handleClickSave}>Save</SaveButton>\n                <CancelButton onClick={this.props.toggleForm}>Cancel</CancelButton>\n              </div>\n              }\n            </SaveAndCancelContainer>\n              {this.props.formType === 'editBookForm' &&\n                <DeleteButton onClick={this.props.handleClickDelete} name='delete'>Delete Book</DeleteButton>\n              }\n                {(this.props.titleValid !== null || this.props.authorValid !== null) &&\n                <FieldsAreReq>*these fields are required.</FieldsAreReq>\n                }\n               \n          </Form>\n             \n        </Sidebar>\n      )\n    }\n  }\n              \nexport default BookForm","import React from 'react';\nimport './App.css';\n// import mastery from './mastery.jpg'\n// import antifragile from './antifragile.jpg'\n// import lotr from './lotr.png'\nimport styled from 'styled-components'\nimport Book from './modules/book.js'\nimport BookList from './components/bookList.js'\nimport BookForm from './components/bookForm.js'\n\nconst Header = styled.header`\n  // margin-top: 16px;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 4;\n  width: 100%;\n  height: 40px;\n  background: #1890ff;\n`\nconst Title = styled.h1`\n  font-size: 16px;\n  font-weight: 500;\n  color: white;\n  text-align: right;\n  margin-right: 24px;\n`\nconst Content = styled.div`\n  margin-top: 48px;\n  // position: absolute;\n  // background: green;\n  height: 100%;\n  width: 72%;\n  float: right;\n  @media only screen and (max-width: 1152px) {\n    width: calc(100% - 32px);\n    // margin-left: 64px;\n  }\n`\nconst AddBookButton = styled.button`\n  position: absolute;\n  right: 40px;\n  bottom: 40px;\n  text-decoration: none;\n  border: none;\n  border-radius: 4px;\n  background: #40a9ff;\n  &:hover {\n    background: #1890ff;\n    cursor: pointer;\n  }\n  color: white;\n  font-size: 16px;\n  font-weight: 500;\n  width: 128px;\n  height: 32px;\n`\nconst lotr = new Book('Lord of the Rings', 'J.R.R. Tolkien', '654', 'Read')\nconst antifragile = new Book('Antifragile', 'Nassim Taleb', '894', 'Read')\n\nconst books = localStorage.getItem('books') ? JSON.parse(localStorage.getItem('books')) : [lotr,antifragile]\n\nclass AddBook extends React.Component {\n  render() {\n    return (\n      <AddBookButton onClick={this.props.toggleForm}>Add Book</AddBookButton>\n    )\n  }\n}\n\n        \nclass Library extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      // The book form\n      title: '',\n      author: '',\n      pages: '',\n      read: false,\n      id: null,\n      // Toggle form between adding book and editing book\n      formType: 'newBookForm',\n      formDisplayed: false,\n      // form validation\n      titleValid: null,\n      authorValid: null\n    }\n    this.toggleForm = this.toggleForm.bind(this)\n    this.toggleFormOn = this.toggleFormOn.bind(this)\n    this.toggleFormOff = this.toggleFormOff.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleClickEdit = this.handleClickEdit.bind(this)\n    this.handleClickSave = this.handleClickSave.bind(this)\n    this.handleClickDelete = this.handleClickDelete.bind(this)\n  }\n  clearStates() {\n    this.setState({\n      title: '',\n      author: '',\n      pages: '',\n      read: false,\n      id: null,\n      formType: 'newBookForm',\n      titleValid: null,\n      authorValid: null\n    })\n  }\n  toggleFormOn() {\n    this.setState({\n      formDisplayed: true\n    })\n  }\n  toggleFormOff() {\n    this.setState({\n      formDisplayed: false\n    })\n  }\n  toggleForm() {\n    this.clearStates()\n    this.setState( state => ({\n      formDisplayed: state.formDisplayed ? false : true\n    }))\n  }\n  handleClickEdit(button) {\n    if (this.state.formDisplayed === false) {\n      this.setState({\n        formDisplayed: true\n      })\n    }\n    this.setState(state => ({\n      formType: 'editBookForm'\n      // formType: state.formType === 'newBookForm' ? state.formType = 'editBookForm' : state.formType = 'newBookForm'\n    }))\n    books.forEach(book => {\n      if (book.id === Number(button.target.parentNode.parentNode.id)) {\n        this.setState({\n          title: book.title,\n          author: book.author,\n          pages: book.pages,\n          read: book.read,\n          id: Number(button.target.parentNode.parentNode.id)\n        })\n      }\n    })\n  }\n  handleClickSave(button) {\n    button.preventDefault()\n    books.forEach(book => {\n      if (book.id === this.state.id) {\n        book.title = this.state.title\n        book.author = this.state.author\n        book.pages = this.state.pages\n        book.read = this.state.read\n        localStorage.setItem('books', JSON.stringify(books))\n        this.toggleForm()\n      }\n    })\n  }\n  handleClickDelete() {\n    books.forEach((book, index) => {\n      // alert('Are you sure you want to delete this book? This action cannot be undone.')\n      if (book.id === this.state.id) {\n        books.splice(index,1)\n        localStorage.setItem('books', JSON.stringify(books))\n        this.clearStates()\n        this.toggleForm()\n      }\n    })\n  }\n  handleChange(input) {\n    const target = input.target\n    const value = target.type === 'checkbox' ? target.checked : target.value\n    const name = input.target.name\n    this.setState({\n      [name]: value\n    })\n  }\n  validate(input) {\n    return input === '' ? false : true\n  }\n  validateForm() {\n    this.setState({\n      titleValid: this.validate(this.state.title),\n      authorValid: this.validate(this.state.author),\n    })\n  }\n  handleSubmit(form) {\n    form.preventDefault()\n    this.validateForm()\n    if (this.validate(this.state.title) && this.validate(this.state.author)) {\n      if (form.target.classList.contains('newBookForm')) {\n        const book = new Book(\n          this.state.title, \n          this.state.author,\n          this.state.pages,\n          this.state.read\n          )\n          books.push(book)\n          localStorage.setItem('books', JSON.stringify(books))\n      }\n      this.toggleForm()\n    }\n  }\n  render() {\n    let myBooks = books\n    return (\n      <div>\n        <Header>\n          <Title>My Library</Title>\n        </Header>\n        {(this.state.formDisplayed && \n                    <BookForm\n                    title={this.state.title}\n                    author={this.state.author}\n                    pages={this.state.pages}\n                    read={this.state.read}\n                    handleChange={this.handleChange}\n                    handleSubmit={this.handleSubmit}\n                    handleClickSave={this.handleClickSave}\n                    handleClickDelete={this.handleClickDelete}\n                    formType={this.state.formType}\n                    formDisplayed={this.state.formDisplayed}\n                    toggleForm={this.toggleForm}\n                    toggleFormOff={this.toggleFormOff}\n                    toggleFormOn={this.toggleFormOn}\n                    titleValid={this.state.titleValid}\n                    authorValid={this.state.authorValid}\n                  />\n            )}\n        <Content>\n          <BookList\n            handleClickEdit={this.handleClickEdit}\n            books={myBooks}\n          />\n\n\n          <AddBook toggleForm={this.toggleForm}/>\n        </Content>\n        \n      </div>\n    )\n  }\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Library/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}